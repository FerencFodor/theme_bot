import { Client as ClientJS, CommandInteraction, Interaction } from "discord.js";
import { MetadataStorage, LoadClass, ClientOptions, DiscordEvents, DOn, GuardFunction } from ".";
import { DDiscord, DSlash } from "./decorators";
export declare class Client extends ClientJS {
    private _silent;
    private _loadClasses;
    private static _requiredByDefault;
    private static _slashGuilds;
    private static _guards;
    static get slashGuilds(): string[];
    static set slashGuilds(value: string[]);
    get slashGuilds(): string[];
    set slashGuilds(value: string[]);
    static get requiredByDefault(): boolean;
    static set requiredByDefault(value: boolean);
    get requiredByDefault(): boolean;
    set requiredByDefault(value: boolean);
    static get guards(): GuardFunction<any, any>[];
    static set guards(value: GuardFunction<any, any>[]);
    get guards(): GuardFunction<any, any>[];
    set guards(value: GuardFunction<any, any>[]);
    static get slashes(): readonly DSlash[];
    get slashes(): readonly DSlash[];
    static get allSlashes(): readonly DSlash[];
    get allSlashes(): readonly DSlash[];
    static get events(): readonly DOn[];
    get events(): readonly DOn[];
    static get discords(): readonly DDiscord[];
    get discord(): readonly DDiscord[];
    static get decorators(): MetadataStorage;
    get decorators(): MetadataStorage;
    get silent(): boolean;
    set silent(value: boolean);
    /**
     * Create your bot
     * @param options { silent: boolean, loadClasses: LoadClass[] }
     */
    constructor(options?: ClientOptions);
    /**
     * Start your bot
     * @param token The bot token
     * @param loadClasses A list of glob path or classes
     */
    login(token: string, ...loadClasses: LoadClass[]): Promise<string>;
    /**
     * Initialize all the @Slash with their permissions
     */
    initSlashes(): Promise<void>;
    /**
     * Fetch the existing slash commands of a guild or globaly
     * @param guild The guild ID (empty -> globaly)
     * @returns The existing commands
     */
    fetchSlash(guildID?: string): Promise<import("discord.js").Collection<`${bigint}`, import("discord.js").ApplicationCommand>>;
    /**
     * Clear the Slash commands globaly or for some guilds
     * @param guilds The guild IDs (empty -> globaly)
     */
    clearSlashes(...guilds: string[]): Promise<void>;
    /**
     * Get the group tree of an interaction
     * /hello => ["hello"]
     * /test hello => ["test", "hello"]
     * /test hello me => ["test", "hello", "me"]
     * @param interaction The targeted interaction
     * @returns The group tree
     */
    getInteractionGroupTree(interaction: CommandInteraction): any[];
    /**
     * Return the corresponding @Slash from a tree
     * @param tree
     * @returns The corresponding Slash
     */
    getSlashFromTree(tree: string[]): DSlash;
    /**
     * Execute the corresponding @Slash command based on an Interaction instance
     * @param interaction The discord.js interaction instance
     * @returns void
     */
    executeSlash(interaction: Interaction): Promise<any>;
    /**
     * Manually build the app
     */
    build(): Promise<void>;
    /**
     * Manually trigger an event (used for tests)
     * @param event The event
     * @param params Params to inject
     * @param once Trigger an once event
     */
    trigger(event: DiscordEvents, params?: any, once?: boolean): Promise<any[]>;
    private loadClasses;
}
