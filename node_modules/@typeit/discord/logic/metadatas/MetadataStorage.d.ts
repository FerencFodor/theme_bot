import { DOn, DDiscord, DGuard, Client, ArgsOf, DiscordEvents, Modifier, DSlash, DOption } from "../..";
import { DGroup } from "../../decorators";
export declare class MetadataStorage {
    private static _instance;
    private _events;
    private _guards;
    private _slashes;
    private _allSlashes;
    private _options;
    private _discords;
    private _modifiers;
    private _groups;
    private _subGroups;
    static get instance(): MetadataStorage;
    static clear(): void;
    get events(): readonly DOn[];
    /**
     * Get the list of used events without duplications
     */
    get usedEvents(): readonly DOn[];
    get discords(): readonly DDiscord[];
    get slashes(): readonly DSlash[];
    get allSlashes(): readonly DSlash[];
    get groups(): readonly DGroup<any>[];
    get subGroups(): readonly DGroup<any>[];
    private get discordMembers();
    addModifier(modifier: Modifier<any>): void;
    addOn(on: DOn): void;
    addSlash(slash: DSlash): void;
    addOption(option: DOption): void;
    addGroup(group: DGroup<DSlash>): void;
    addSubGroup(subGroup: DGroup<DOption>): void;
    addGuard(guard: DGuard): void;
    addDiscord(discord: DDiscord): void;
    build(): Promise<void>;
    private groupSlashes;
    /**
     * Trigger a discord event
     * @param event The event to trigger
     * @param client The discord.ts client instance
     * @param once Should we execute the event once
     */
    trigger<Event extends DiscordEvents>(event: Event, client: Client, once?: boolean): ((...params: ArgsOf<Event>) => Promise<any>);
}
