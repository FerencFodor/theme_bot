"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DSlash = void 0;
const __1 = require("../..");
const Method_1 = require("./Method");
class DSlash extends Method_1.Method {
    constructor() {
        super();
        this._defaultPermission = true;
        this._options = [];
        this._permissions = [];
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get subgroup() {
        return this._subgroup;
    }
    set subgroup(value) {
        this._subgroup = value;
    }
    get permissions() {
        return this._permissions;
    }
    set permissions(value) {
        this._permissions = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    get defaultPermission() {
        return this._defaultPermission;
    }
    set defaultPermission(value) {
        this._defaultPermission = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    static create(name, description, defaultPermission = true, guilds) {
        const slash = new DSlash();
        slash.name = name.toLowerCase();
        slash.description = description || slash.name;
        slash.defaultPermission = defaultPermission;
        slash.guilds = guilds || __1.Client.slashGuilds;
        return slash;
    }
    toSubCommand() {
        const option = __1.DOption.create(this.name, "SUB_COMMAND", this.description).decorate(this.classRef, this.key, this.method, this.from, this.index);
        option.options = this.options;
        return option;
    }
    toObject() {
        const options = [...this.options].reverse().map((option) => option.toObject());
        return {
            name: this.name,
            description: this.description,
            options: options,
            defaultPermission: this.defaultPermission,
        };
    }
    getPermissions() {
        return this.permissions.map((permission) => ({
            permission: true,
            id: permission.id,
            type: permission.type,
        }));
    }
    getLastNestedOption(options) {
        var _a;
        const arrOptions = Array.from(options === null || options === void 0 ? void 0 : options.values());
        if (!((_a = arrOptions === null || arrOptions === void 0 ? void 0 : arrOptions[0]) === null || _a === void 0 ? void 0 : _a.options)) {
            return arrOptions;
        }
        return this.getLastNestedOption(arrOptions === null || arrOptions === void 0 ? void 0 : arrOptions[0].options);
    }
    parseParams(interaction) {
        const options = this.getLastNestedOption(interaction.options);
        const values = this.options.map((opt, index) => {
            var _a;
            return (_a = options[index]) === null || _a === void 0 ? void 0 : _a.value;
        });
        return values;
    }
}
exports.DSlash = DSlash;
//# sourceMappingURL=DSlash.js.map