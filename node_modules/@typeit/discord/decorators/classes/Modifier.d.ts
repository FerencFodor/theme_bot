import { Decorator } from "./Decorator";
export declare type ModifyFunction<ToModify extends Decorator> = (original: ToModify) => any;
export declare class Modifier<ToModify extends Decorator> extends Decorator {
    private _toModify;
    private _modifyTypes;
    protected constructor();
    static create<ToModify extends Decorator>(toModify: ModifyFunction<ToModify>, ...modifyTypes: any[]): Modifier<ToModify>;
    /**
     * Apply the modifier to a list of objects
     * it only applies the modifications to linked objects
     * that are on the targets type of modification
     * @param modifiers The modifier list
     * @param originals The list of objects to modify
     * @returns
     */
    static applyFromModifierListToList(modifiers: Modifier<any>[], originals: Decorator[]): Promise<void[]>;
    applyModifications(original: ToModify): any;
}
