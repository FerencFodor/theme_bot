import { DGuard, DDiscord } from "../..";
import { Decorator } from "./Decorator";
export declare abstract class Method extends Decorator {
    protected _discord: DDiscord;
    protected _guards: DGuard[];
    get discord(): DDiscord;
    set discord(value: DDiscord);
    /**
     * Compiled methods executes all the guards and the main method
     * ```ts
     * compiledMethod = async (params: ArgsOf<any>, client: Client) => {
     *   guard1(params, client)
     *   guard2(params, client)
     *   guard3(params, client)
     *   main(params, client)
     * }
     * ```
     * @returns The function that execute everything
     */
    get execute(): (...params: any[]) => Promise<any>;
    /**
     * Returns all the guards of the application
     * The guards that are defined globaly with Client
     * The guards that decorate @Discord
     * The guards that decorate the method (this)
     */
    get guards(): DGuard[];
    set guards(value: DGuard[]);
    /**
     * Define how to parse the params
     * @param params The params to parse
     */
    abstract parseParams(...params: any[]): any;
    /**
     * Execute a guard with params
     */
    getGuardFunction(): (...params: any[]) => Promise<any>;
}
