"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOption = void 0;
const discord_js_1 = require("discord.js");
const Decorator_1 = require("../classes/Decorator");
const __1 = require("../..");
class DOption extends Decorator_1.Decorator {
    constructor() {
        super();
        this._required = false;
        this._choices = [];
        this._options = [];
        this._isNode = false;
    }
    get isNode() {
        return this._isNode;
    }
    set isNode(value) {
        this._isNode = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = value;
    }
    get choices() {
        return this._choices;
    }
    set choices(value) {
        this._choices = value;
    }
    get stringType() {
        if (typeof this.type === "string") {
            return this.type;
        }
        switch (this.type) {
            case String:
                return __1.OptionType.STRING;
            case Number:
                return __1.OptionType.INTEGER;
            case Boolean:
                return __1.OptionType.BOOLEAN;
            case discord_js_1.Channel:
                return __1.OptionType.CHANNEL;
            case discord_js_1.TextChannel:
                return __1.OptionType.CHANNEL;
            case discord_js_1.VoiceChannel:
                return __1.OptionType.CHANNEL;
            case discord_js_1.Role:
                return __1.OptionType.ROLE;
            case discord_js_1.User:
                return __1.OptionType.USER;
            case discord_js_1.ClientUser:
                return __1.OptionType.USER;
        }
    }
    static create(name, type, description, required, index) {
        const option = new DOption();
        option._name = name.toLowerCase();
        option._type = type || String;
        option._description = description || `${name} - ${option.stringType}`;
        option._required =
            required !== undefined ? required : __1.Client.requiredByDefault;
        option._index = index;
        return option;
    }
    toObject() {
        const data = {
            description: this.description,
            name: this.name,
            type: this.stringType,
            required: this.required,
            choices: this.choices.map((choice) => choice.toObject()),
            options: [...this.options].reverse().map((option) => option.toObject())
        };
        if (!this.isNode) {
            delete data.required;
        }
        return data;
    }
}
exports.DOption = DOption;
//# sourceMappingURL=DOption.js.map